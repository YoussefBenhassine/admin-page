import fetch from 'node-fetch';

const API_BASE = 'https://admin-page-7ikz.onrender.com/api';

async function testOneTimeUse() {
    console.log('üß™ Test de la fonctionnalit√© one-time use des licences\n');

    try {
        // 1. Cr√©er une licence avec machineId requis
        console.log('1. Cr√©ation d\'une licence...');
        const createResponse = await fetch(`${API_BASE}/licenses`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                expirationDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                machineId: 'test-machine-123'
            })
        });
        
        const createData = await createResponse.json();
        if (!createData.success) {
            throw new Error('Erreur cr√©ation licence: ' + createData.error);
        }
        
        const licenseKey = createData.license.key;
        const machineId1 = 'test-machine-123';
        const machineId2 = 'test-machine-456';
        console.log(`‚úÖ Licence cr√©√©e: ${licenseKey.substring(0, 20)}...`);

        // 2. Premi√®re validation (doit r√©ussir)
        console.log('\n2. Premi√®re validation de la licence...');
        const firstValidation = await fetch(`${API_BASE}/validate-license`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ licenseKey, machineId: machineId1 })
        });
        
        const firstResult = await firstValidation.json();
        if (!firstResult.valid) {
            throw new Error('Premi√®re validation √©chou√©e: ' + firstResult.error);
        }
        console.log('‚úÖ Premi√®re validation r√©ussie');

        // 3. Deuxi√®me validation avec la m√™me machine (doit √©chouer)
        console.log('\n3. Deuxi√®me validation avec la m√™me machine...');
        const secondValidation = await fetch(`${API_BASE}/validate-license`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ licenseKey, machineId: machineId1 })
        });
        
        const secondResult = await secondValidation.json();
        if (secondResult.valid) {
            throw new Error('‚ùå Deuxi√®me validation aurait d√ª √©chouer');
        }
        console.log('‚úÖ Deuxi√®me validation √©chou√©e comme attendu: ' + secondResult.error);

        // 4. Validation avec une machine diff√©rente (doit √©chouer)
        console.log('\n4. Validation avec une machine diff√©rente...');
        const thirdValidation = await fetch(`${API_BASE}/validate-license`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ licenseKey, machineId: machineId2 })
        });
        
        const thirdResult = await thirdValidation.json();
        if (thirdResult.valid) {
            throw new Error('‚ùå Validation avec machine diff√©rente aurait d√ª √©chouer');
        }
        console.log('‚úÖ Validation avec machine diff√©rente √©chou√©e comme attendu: ' + thirdResult.error);

        // 5. Test cr√©ation licence sans machineId (doit √©chouer)
        console.log('\n5. Test cr√©ation licence sans machineId...');
        const invalidCreateResponse = await fetch(`${API_BASE}/licenses`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                expirationDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                // Pas de machineId
            })
        });
        
        const invalidCreateData = await invalidCreateResponse.json();
        if (invalidCreateData.success) {
            throw new Error('‚ùå Cr√©ation licence sans machineId aurait d√ª √©chouer');
        }
        console.log('‚úÖ Cr√©ation licence sans machineId √©chou√©e comme attendu: ' + invalidCreateData.error);

        console.log('\nüéâ Tous les tests one-time use sont pass√©s avec succ√®s!');
        console.log('\nüìã R√©sum√© des v√©rifications:');
        console.log('‚úÖ Licence cr√©√©e avec machineId requis');
        console.log('‚úÖ Premi√®re utilisation r√©ussie');
        console.log('‚úÖ R√©utilisation sur m√™me machine bloqu√©e');
        console.log('‚úÖ Utilisation sur machine diff√©rente bloqu√©e');
        console.log('‚úÖ Cr√©ation licence universelle bloqu√©e');

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
        process.exit(1);
    }
}

// Ex√©cuter le test
testOneTimeUse();
